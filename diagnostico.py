#!/usr/bin/env python3
"""
Diagn√≥stico del Sistema eSIM Pro
Verifica el estado de la aplicaci√≥n y proporciona recomendaciones
"""

import os
import sys
import subprocess
import json
from datetime import datetime

def print_header(title):
    print(f"\n{'='*60}")
    print(f"üéØ {title}")
    print('='*60)

def print_section(title):
    print(f"\nüìã {title}")
    print('-'*40)

def check_expo_status():
    """Verifica si Expo est√° corriendo"""
    print_section("ESTADO DE EXPO")
    
    try:
        # Verificar si el metro bundler est√° corriendo
        result = subprocess.run(['netstat', '-an'], capture_output=True, text=True)
        
        expo_ports = ['19000', '19001', '19002']  # Puertos t√≠picos de Expo
        running_ports = []
        
        for port in expo_ports:
            if f":{port}" in result.stdout:
                running_ports.append(port)
        
        if running_ports:
            print(f"‚úÖ Expo ejecut√°ndose en puertos: {', '.join(running_ports)}")
            return True
        else:
            print("‚ùå Expo no est√° ejecut√°ndose")
            print("üí° Ejecuta: npx expo start")
            return False
            
    except Exception as e:
        print(f"‚ùå Error verificando Expo: {e}")
        return False

def check_django_status():
    """Verifica si Django est√° corriendo"""
    print_section("ESTADO DE DJANGO")
    
    try:
        result = subprocess.run(['netstat', '-an'], capture_output=True, text=True)
        
        if ":8000" in result.stdout:
            print("‚úÖ Django ejecut√°ndose en puerto 8000")
            return True
        else:
            print("‚ùå Django no est√° ejecut√°ndose")
            print("üí° Ejecuta: python manage.py runserver")
            return False
            
    except Exception as e:
        print(f"‚ùå Error verificando Django: {e}")
        return False

def check_mobile_config():
    """Verifica configuraci√≥n del m√≥vil"""
    print_section("CONFIGURACI√ìN M√ìVIL")
    
    # Verificar que AuthService est√© configurado
    auth_service_path = "mobile/src/services/AuthService.ts"
    
    if os.path.exists(auth_service_path):
        with open(auth_service_path, 'r', encoding='utf-8') as f:
            content = f.read()
            
        if "DEMO_MODE = true" in content:
            print("‚ö†Ô∏è  AuthService en modo DEMO")
            print("üí° Para conectar al backend: cambiar DEMO_MODE = false")
        elif "DEMO_MODE = false" in content:
            print("‚úÖ AuthService configurado para backend real")
        
        if "localhost:8000" in content:
            print("‚úÖ URL del backend configurada")
        else:
            print("‚ùå URL del backend no encontrada")
    else:
        print("‚ùå AuthService no encontrado")

def check_phone_connection():
    """Consejos para conexi√≥n con tel√©fono"""
    print_section("CONEXI√ìN CON TEL√âFONO")
    
    print("üì± Para que la app cargue en tu tel√©fono:")
    print("1. ‚úÖ Aseg√∫rate que tu PC y tel√©fono est√©n en la misma red WiFi")
    print("2. ‚úÖ Escanea el QR de Expo con la app Expo Go")
    print("3. ‚úÖ Si no funciona, prueba modo t√∫nel: npx expo start --tunnel")
    print("4. ‚úÖ Verifica que Windows Firewall no bloquee el puerto 19000")
    
    print("\nüîß Comandos √∫tiles:")
    print("   npx expo start --tunnel     # Modo t√∫nel (m√°s lento pero funciona siempre)")
    print("   npx expo start --localhost  # Solo localhost")
    print("   npx expo start --lan        # Red local (recomendado)")
    
    print("\nüîç Troubleshooting:")
    print("   - Si sale 'Network response timed out': usar --tunnel")
    print("   - Si la app se queda en blanco: revisar logs de Metro")
    print("   - Si no conecta al backend: verificar DEMO_MODE en AuthService")

def check_admin_access():
    """Verifica acceso al panel admin"""
    print_section("PANEL DE ADMINISTRACI√ìN")
    
    print("üèõÔ∏è  Acceso al Admin Panel:")
    print("   URL: http://localhost:8000/admin/")
    print("   Usuario: admin")
    print("   Password: [la que configuraste]")
    
    print("\nüìä Funcionalidades disponibles:")
    print("   ‚úÖ Gesti√≥n de usuarios (incluye datos OAuth)")
    print("   ‚úÖ Monitoreo de autenticaciones Google/Apple")
    print("   ‚úÖ Estad√≠sticas de uso")
    print("   ‚úÖ Configuraci√≥n de planes y precios")

def main():
    print_header("DIAGN√ìSTICO eSIM PRO")
    print(f"Fecha: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # Cambiar al directorio del proyecto
    if os.path.exists("backend"):
        os.chdir("backend")
    
    django_ok = check_django_status()
    
    os.chdir("..")  # Volver al directorio ra√≠z
    
    if os.path.exists("mobile"):
        os.chdir("mobile")
    
    expo_ok = check_expo_status()
    check_mobile_config()
    
    os.chdir("..")  # Volver al directorio ra√≠z
    
    check_phone_connection()
    check_admin_access()
    
    print_header("RESUMEN Y PR√ìXIMOS PASOS")
    
    if django_ok and expo_ok:
        print("üéâ ¬°Excelente! Ambos servicios est√°n corriendo")
        print("\nüöÄ Pr√≥ximos pasos:")
        print("1. Configura AuthService (DEMO_MODE = false)")
        print("2. Prueba la conexi√≥n m√≥vil-backend")
        print("3. Configura datos reales en el admin panel")
    else:
        print("‚ö†Ô∏è  Algunos servicios necesitan atenci√≥n")
        if not django_ok:
            print("   - Iniciar Django: python manage.py runserver")
        if not expo_ok:
            print("   - Iniciar Expo: npx expo start")
    
    print("\nüìö Documentaci√≥n completa: ADMIN_GUIDE.md")

if __name__ == "__main__":
    main()
